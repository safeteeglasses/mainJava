Introduction to Tools Exercises
-------------------------------

The following exercises cover Git, and several Unix commands typically used
alongside Git. They are intended to help you gain familiarity and build 
confidence while on the command line inside the Terminal.

The exercise folder contains this file, plus a java-helloworld folder.  The
java-helloworld folder represents a simplified Java project. (The layout of an
actual Java project will be covered in later lectures.) For now, the reduced 
structure provides an opportunity to navigate between folders, and to work with
files as you would in an actual Java project, but cleared of much of the 
clutter found in real projects.


----
1.  To begin, open your terminal, and enter the following command to change 
    directory to the exercise folder.
----

$ cd ~/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld

Note, do not enter the beginning "$" character. It represents the prompt for 
the command line. This convention is commonly used to visually seperate the 
actual command from other text in Unix documentation.


----
2.  What does the ~ (tilde) character in the above command to change directory 
    refer to?
----

The ~ (tilde) character refers to your home directory, so that "cd ~" changes 
your working directory to your home.


----
3.  A good habit to develop, especially while you're developing your skills on 
    the command line, is to confirm your location after changing directories. 
    This can be easily accomplished with the "pwd" command.
----

$ pwd
/Users/ccastelaz/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld

The present working directory displayed should match the directory you changed 
to in Exercise 1.  Note, the two may not match at the very beginning if you
used the tilde when changing directories.  The tilde is a conveniece to save 
you some typing.  The system resolves the tilde to the full location as it
changes directory, and the "pwd" command reflects this.


----
4.  Display a list of all the files and folders in your present working 
    directory. Include all dot-files and dot-folders.  Recall the "all" and
    "long format" flags for the "ls" command.
----

$ ls -la
drwxr-xr-x  9 ccastelaz  staff   306 May  3 09:06 .
drwxr-xr-x  5 ccastelaz  staff   170 May  3 09:06 ..
-rw-r--r--@ 1 ccastelaz  staff  6148 May  1 09:06 .DS_Store
-rw-r--r--  1 ccastelaz  staff  1397 May  3 09:06 .classpath
-rw-r--r--  1 ccastelaz  staff   539 May  3 09:06 .project
drwxr-xr-x  3 ccastelaz  staff   102 May  3 09:06 database
-rwxr-xr-x  1 ccastelaz  staff  1091 May  3 09:06 pom.xml
drwxr-xr-x  4 ccastelaz  staff   136 May  3 09:06 src
drwxr-xr-x  4 ccastelaz  staff   136 May  3 09:06 target


----
5.  What do the "." and ".." folders displayed in the directory listing in
    Exercise 4 represent?
----

The "." represents your current working directory.
The ".." represents the parent of your current working directory.

----
6.  What are the names of the files, including any dot-files, displayed in the
    directory listing in Exercise 4?
----

.DS_Store
.classpath
.project
pom.xml


----
7.  What are the names of the folders, including any dot-folders, displayed in 
    the directory listing in Exercise 4?
----

.
..
database
src
target

----
8.  pom.xml is a Maven build file. You will learn more about Maven in later 
    lectures. As for the exercise, it is sometimes necessary, and usually 
    always interesting to be able to view the contents of files while at the
    command line. A friendly and easy-to-use utility that allows you to do this
    is "less".  
    
    "less" has two great features. First, it is a file viewer. You never have 
    to worry about accidently modifying the file, as you would if you opened it 
    in an editor.  Second, it allows you to page-up, page-down, search, and 
    perform other nifty navigations which are really useful when files are big.

    View pom.xml using "less".  

    Or, for the more adventuresome, you might want to try using "less" with a huge
    file like database/pagila.sql where the utility's navigation features really
    shine.

    Press Q to quit when you wish to stop viewing either of the files.
----

$ less pom.xml

Or

$ less database/pagila.sql

You are encouraged to make "less" part of your standard command line toolkit.


----
9.  This is good time to make a Git snapshot of your progress.  Usually, 
    you'll want to check the Git status to review the list of files that
    have been changed, added, or deleted.  Then you'll want to add and commit
    those changes to your local repository.

    Don't forget to save your current changes to this text file to disk before
    making the snapshot.
----

Did you remember to save "introduction-to-tools-exercise.txt"?

$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   ../introduction-to-tools-exercises.txt

no changes added to commit (use "git add" and/or "git commit -a")

$ git add -A

Git doesn't report anything unless the add failed for some reason, so there 
isn't anything to copy-paste or enter.

$ git commit -m "Good stopping point"
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
	modified:   ../introduction-to-tools-exercises.txt

no changes added to commit

Note, you do not need to push this commit up to BitBucket at this time. The
typical Git workflow is to make many small commits to your local repo while 
working. You push up to BitBucket when you're ready to share. 

You'll be asked to push to BitBucket twice in this exercise, once a bit further 
along, and then at the end. 


----
10.  Change into src/main/java/com/techelevator directory under java-helloworld.
    Show your present working directory after the change.
----

$ cd src/main/java/com/techelevator
$ pwd
/Users/ccastelaz/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld/src/main/java/com/techelevator


----
11. Does the change directory command in Exercise 10 use a relative, or absolute
    path?
----

Since the path after the "cd" did not begin with a "/", it is a relative path.
Absolute paths always begin with a "/".


----
12. List all the files and folders, including any dot-files or dot-folders in
    your present working directory.
----

$ ls -la
drwxr-xr-x  3 ccastelaz  staff  102 May  3 09:06 .
drwxr-xr-x  3 ccastelaz  staff  102 May  3 09:06 ..
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 09:06 Helloworld.java


----
13. "Helloworld.java" is the sole source code file of the Helloworld application.
    Make a backup of the file named "Helloworld.java.backup" using the copy 
    command.
----

$ cp Helloworld.java Helloworld.java.backup

The "cp" parameters are the name of the source file followed by the name of the 
destination file. 

$ ls -la
drwxr-xr-x  4 ccastelaz  staff  136 May  3 10:36 .
drwxr-xr-x  3 ccastelaz  staff  102 May  3 09:06 ..
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 09:06 Helloworld.java
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 10:36 Helloworld.java.backup


----    
14. Rename "Helloworld.java.backup" to "Helloworld.java.copy" using the move 
    command. (There is no rename command in UNIX.)
----

$ mv Helloworld.java.backup Helloworld.java.copy

The "mv" parameters are the existing name of the file followed by the new name 
of the file. 

$ ls -la
drwxr-xr-x  4 ccastelaz  staff  136 May  3 10:37 .
drwxr-xr-x  3 ccastelaz  staff  102 May  3 09:06 ..
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 09:06 Helloworld.java
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 10:36 Helloworld.java.copy


----
15. Let's call this a "feature completion" point in the exercises, and not only
    checkin to the local repository, but also push it up to BitBucket. 
----

$ git status
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)
Untracked files:
  (use "git add <file>..." to include in what will be committed)

	helloworld.java.copy

nothing added to commit but untracked files present (use "git add" to track)

$ git add -A

Git doesn't report anything unless the add failed for some reason, so there 
isn't anything to copy-paste or enter.

$ git commit
[master 3db591b] copied helloworld.java
 1 file changed, 9 insertions(+)
 create mode 100755 m1-w1d1-intro-to-tools-exercises/java-helloworld/src/main/java/com/techelevator/helloworld.java.copy

$ git push origin master
Counting objects: 13, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (13/13), 1.35 KiB | 0 bytes/s, done.
Total 13 (delta 5), reused 0 (delta 0)
To https://bitbucket.org/te-cle-cohort-5/CraigCastelazjava-exercises
   ed40117..3db591b  master -> master


----
16. Delete the backup file, "Helloworld.java.copy" using the remove command.
----

$ rm Helloworld.java.copy

The "rm" parameter is the name of the file to be deleted.

$ ls -la
drwxr-xr-x  3 ccastelaz  staff  102 May  3 10:44 .
drwxr-xr-x  3 ccastelaz  staff  102 May  3 09:06 ..
-rwxr-xr-x  1 ccastelaz  staff  141 May  3 09:06 Helloworld.java


----
17. Change directory to the java-helloworld folder using either one of the 
    commands shown below.
----

$ cd ../../../../../

or

$ cd ~/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld

Note the first alternative relies upon the ".." parent folder notation.  In 
essence it says to change directory from the current folder's parent's parent's
parent's parent's parent.  You'll know you're getting comfortable at the
command line when that seems natural.

Regardless of the option you chose, check your new location.

$ pwd
/Users/ccastelaz/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld


----
18. Create a documentation folder named "docs" under java-helloworld, and then
    change into it.
----

$ mkdir docs
$ cd docs
$ pwd
/Users/ccastelaz/workspace/exercises/m1-w1d1-intro-to-tools-exercises/java-helloworld/docs

----
19. Create a new file name "readme.txt" using Visual Studio Code, and add the text
    "Hello, this is the beginning of the application's documentation."
----

$ code readme.txt

Don't forget to save the file in Visual Studio Code!


----
20. As a final exercise, please perform the following commands to save and push your 
    work so it can be reviewed by an instructor.
----

$ git status

$ git add -A

$ git commit -m "Completed the exercises"

$ git push origin master

